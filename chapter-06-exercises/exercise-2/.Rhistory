# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub('a', 'ee', fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub('a', 'o', fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c('Warren', 'Justin', 'Jackson')
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n + 1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, .1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, .1)
x_range
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
sin_wave
wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c('Warren', 'Justin', 'Jackson')
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n + 1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, .1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c('Warren', 'Justin', 'Jackson')
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n + 1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, .1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- 21:30
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- seq(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers(2:5)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8,6,7,5,3,0,9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers(2:5)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbersp[2:5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8,6,7,5,3,0,9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers<=5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers>5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers>5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers%%2!=0] <- 0
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c('toast', 'peanut butter')
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c('hotdog', 'ketsup')
# Create a list `meals` that has contains your breakfast and lunch
meals <- c(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
dinner <- c('chicken', 'yogurt')
meals <- c(meals, dinner)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c('chicken', 'yogurt')
meals <- dinner = my_dinner
meals <- dinner = my_dinner
meals$dinner <- my_dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals$dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals$dinner[1]
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals[breakfast]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals['breakfast']
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals['breakfast', 'lunch']
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals['breakfast''lunch']
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals['breakfast'U 'lunch']
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
meals['breakfast', 'lunch']
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num_meal_items <- lapply(length(), meals)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num_meal_items <- lapply(meals, length)
append(name, 'pizza')
append(name_vector, 'pizza')
name_vector <- 'pizza'
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- sapply(meals, c)
View(better_meals)
View(better_meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, c)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- sapply(meals, c)
View(better_meals)
add_pizza(better_meals)
name_vector <- 'pizza'
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(name_vector){
name_vector <- 'pizza'
}
add_pizza <- function(name_vector){
name_vector <- 'pizza'
}
add_pizza(better_meals)
View(better_meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- sapply(meals, c)
add_pizza(better_meals)
View(better_meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- c(meals)
add_pizza(better_meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- unlist(meals)
add_pizza(better_meals)
print(better_meals)
better_meals <- pizza
better_meals <- 'pizza'
better_meals
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- unlist(meals, use.names = False)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- unlist(meals, use.names = FALSE)
better_meals
better_meals <- pizza
better_meals <- 'pizza'
better_meals
name_vector[nchar(name_vector) + 1] <- 'pizza'
add_pizza <- function(name_vector){
name_vector[nchar(name_vector) + 1] <- 'pizza'
}
add_pizza(better_meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- unlist(meals, use.names = FALSE)
add_pizza(better_meals)
better_meals
append(name_vector, 'pizza', after = nchar(name_vector))
add_pizza <- function(name_vector){
append(name_vector, 'pizza', after = nchar(name_vector))
}
better_meals <- unlist(meals, use.names = FALSE)
add_pizza(better_meals)
better_meals
add_pizza <- function(name_vector){
name_vector <- append(name_vector, 'pizza', after = nchar(name_vector))
}
better_meals <- unlist(meals, use.names = FALSE)
add_pizza(better_meals)
better_meals
add_pizza <- function(name_vector){
return(append(name_vector, 'pizza', after = nchar(name_vector)))
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- unlist(meals, use.names = FALSE)
better_meals <- add_pizza(better_meals)
better_meals
add_pizza <- function(name_vector){
return(append(name_vector, 'pizza', after = nchar(name_vector)))
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- unlist(meals, use.names = FALSE)
better_meals <- add_pizza(better_meals)
better_meals
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c('toast', 'peanut butter')
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c('hotdog', 'ketsup')
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c('chicken', 'yogurt')
meals$dinner <- my_dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals['breakfast']
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
num_meal_items <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(name_vector){
return(append(name_vector, 'pizza', after = nchar(name_vector)))
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- unlist(meals, use.names = FALSE)
better_meals <- add_pizza(better_meals)
better_meals
early_meals <- list(meals['breakfast'], meals['lunch'])
meals$ <- my_dinner
dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals$dinner
meals['breakfast']
list(meals['breakfast'])
meals['breakfast'][1]
meals['breakfast'][0]
meals['breakfast'][1]
meals['breakfast'][1][1]
meals['breakfast'][1][1\0]
meals['breakfast'][1][0]
meals['breakfast'][0][1]
meals['breakfast'][1][1]
meals['breakfast'][1]['breakfast']
meals['breakfast']
meals$breakfast
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(unlist(meals['breakfast'], use.names = FALSE), unlist(meals['lunch'], use.names = FALSE))
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(unlist('breakfast' = meals['breakfast'], use.names = FALSE), 'lunch' = unlist(meals['lunch'], use.names = FALSE))
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(unlist(breakfast = meals['breakfast'], use.names = FALSE), lunch = unlist(meals['lunch'], use.names = FALSE))
